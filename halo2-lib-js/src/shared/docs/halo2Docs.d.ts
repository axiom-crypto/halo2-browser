// Generated by dts-bundle-generator v8.0.1

import { Halo2Wasm } from '@axiom-crypto/halo2-wasm/web';

declare class CircuitValue {
	private _value;
	private _cell;
	constructor(circuit: Halo2Wasm, { value, cell }: {
		value?: bigint | number | string;
		cell?: number;
	});
	cell(): number;
	value(): bigint;
	number(): number;
	address(): string;
}

export type RawCircuitInput = string | number | bigint;

/**
 * Creates a circuit variable from a number, bigint, or string.
 *
 * @param a The raw circuit input.
 * @returns The witness cell.
 */
declare const witness: (a: RawCircuitInput) => CircuitValue;
/**
 * Creates a circuit constant from a number, bigint, or string.
 *
 * @param a The raw circuit input.
 * @returns The constant cell.
 */
declare const constant: (a: RawCircuitInput) => CircuitValue;
/**
 * Adds two circuit values.
 *
 * @param a The first circuit value.
 * @param b The second circuit value.
 * @returns The sum of the two circuit values.
 */
declare const add: (a: CircuitValue, b: CircuitValue) => CircuitValue;
/**
 * Subtracts the second circuit value from the first circuit value.
 *
 * @param a The first circuit value.
 * @param b The second circuit value.
 * @returns The difference between the two circuit values.
 */
declare const sub: (a: CircuitValue, b: CircuitValue) => CircuitValue;
/**
 * Negates a circuit value.
 *
 * @param a The circuit value to negate.
 * @returns The negation of the circuit value.
 */
declare const neg: (a: CircuitValue) => CircuitValue;
/**
 * Multiplies two circuit values.
 *
 * @param a The first circuit value.
 * @param b The second circuit value.
 * @returns The product of the two circuit values.
 */
declare const mul: (a: CircuitValue, b: CircuitValue) => CircuitValue;
/**
 * Multiplies two circuit values and adds a third circuit value.
 *
 * @param a The first circuit value.
 * @param b The second circuit value.
 * @param c The third circuit value.
 * @returns The result of multiplying the first two circuit values and adding the third circuit value.
 */
declare const mulAdd: (a: CircuitValue, b: CircuitValue, c: CircuitValue) => CircuitValue;
/**
 * Multiplies a circuit value by the negation of another circuit value.
 *
 * @param a The first circuit value.
 * @param b The second circuit value.
 * @returns The result of multiplying the first circuit value by the negation of the second circuit value.
 */
declare const mulNot: (a: CircuitValue, b: CircuitValue) => CircuitValue;
/**
 * Asserts that a circuit value is a bit.
 *
 * @param a The circuit value to assert.
 */
declare const assertBit: (a: CircuitValue) => void;
/**
 * Asserts that a circuit value is a constant.
 *
 * @param a The circuit value to assert.
 * @param b The raw circuit input.
 */
declare const assertIsConst: (a: CircuitValue, b: RawCircuitInput) => void;
/**
 * Computes the inner product of two arrays of circuit values.
 *
 * @param a The first array of circuit values.
 * @param b The second array of circuit values.
 * @returns The inner product of the two arrays.
 */
declare const innerProduct: (a: CircuitValue[], b: CircuitValue[]) => CircuitValue;
/**
 * Computes the sum of an array of circuit values.
 *
 * @param arr The array of circuit values.
 * @returns The sum of the array of circuit values.
 */
declare const sum: (arr: CircuitValue[]) => CircuitValue;
/**
 * Performs a bitwise AND operation on two circuit values.
 *
 * @param a The first circuit value.
 * @param b The second circuit value.
 * @returns The result of the bitwise AND operation.
 */
declare const and: (a: CircuitValue, b: CircuitValue) => CircuitValue;
/**
 * Performs a bitwise OR operation on two circuit values.
 *
 * @param a The first circuit value.
 * @param b The second circuit value.
 * @returns The result of the bitwise OR operation.
 */
declare const or: (a: CircuitValue, b: CircuitValue) => CircuitValue;
/**
 * Performs a bitwise NOT operation on a circuit value.
 *
 * @param a The circuit value.
 * @returns The result of the bitwise NOT operation.
 */
declare const not: (a: CircuitValue) => CircuitValue;
/**
 * Decrements a circuit value by 1.
 *
 * @param a The circuit value.
 * @returns The decremented circuit value.
 */
declare const dec: (a: CircuitValue) => CircuitValue;
/**
 * Selects a circuit value based on a condition.
 *
 * @param a The first circuit value.
 * @param b The first circuit value.
 * @param sel The condition boolean circuit value.
 * @returns sel ? a : b
 */
declare const select: (a: CircuitValue, b: CircuitValue, sel: CircuitValue) => CircuitValue;
/**
 * Performs a bitwise OR-AND operation on three circuit values.
 *
 * @param a The first circuit value.
 * @param b The second circuit value.
 * @param c The third circuit value.
 * @returns The result of the OR-AND operation.
 */
declare const orAnd: (a: CircuitValue, b: CircuitValue, c: CircuitValue) => CircuitValue;
/**
 * Converts an array of circuit values to an indicator array.
 *
 * @param bits The array of circuit values.
 * @returns The indicator circuit value.
 */
declare const bitsToIndicator: (bits: CircuitValue[]) => CircuitValue[];
/**
 * Converts an index circuit value to an indicator circuit value.
 *
 * @param idx The index circuit value.
 * @param len The length of the indicator circuit value.
 * @returns The indicator circuit value.
 */
declare const idxToIndicator: (idx: CircuitValue, len: RawCircuitInput) => CircuitValue[];
/**
 * Selects circuit values from an array based on an indicator circuit value.
 *
 * @param arr The array of circuit values.
 * @param indicator The indicator circuit value.
 * @returns The selected circuit values.
 */
declare const selectByIndicator: (arr: CircuitValue[], indicator: CircuitValue[]) => CircuitValue;
/**
 * Selects a circuit value from an array based on an index circuit value.
 *
 * @param arr The array of circuit values.
 * @param idx The index circuit value.
 * @returns The selected circuit value.
 */
declare const selectFromIdx: (arr: CircuitValue[], idx: CircuitValue) => CircuitValue;
/**
 * Checks if a circuit value is zero.
 *
 * @param a The circuit value to check.
 * @returns The indicator circuit value representing whether the input is zero.
 */
declare const isZero: (a: CircuitValue) => CircuitValue;
/**
 * Checks if two circuit values are equal.
 *
 * @param a The first circuit value.
 * @param b The second circuit value.
 * @returns The indicator circuit value representing whether the two inputs are equal.
 */
declare const isEqual: (a: CircuitValue, b: CircuitValue) => CircuitValue;
/**
 * Converts a circuit value to an array of bits.
 *
 * @param a The circuit value to convert.
 * @param len The length of the resulting bit array.
 * @returns The array of bits representing the input circuit value.
 */
declare const numToBits: (a: CircuitValue, len: RawCircuitInput) => CircuitValue[];
/**
 * Asserts that two circuit values are equal.
 *
 * @param a The first circuit value.
 * @param b The second circuit value.
 */
declare const checkEqual: (a: CircuitValue, b: CircuitValue) => void;
/**
 * Checks if a circuit value is within a specified range.
 *
 * @param a The circuit value to check.
 * @param b The range of the circuit value.
 */
declare const rangeCheck: (a: CircuitValue, b: RawCircuitInput) => void;
/**
 * Checks if the first circuit value is less than the second circuit value.
 *
 * @param a The first circuit value.
 * @param b The second circuit value.
 * @param c The range of the circuit values.
 */
declare const checkLessThan: (a: CircuitValue, b: CircuitValue, c?: string) => void;
/**
 * Checks if the first circuit value is less than the second circuit value.
 *
 * @param a The first circuit value.
 * @param b The second circuit value.
 * @param c The range of the circuit values.
 * @returns The indicator circuit value representing whether the first input is less than the second input.
 */
declare const isLessThan: (a: CircuitValue, b: CircuitValue, c?: string) => CircuitValue;
/**
 * Divides two circuit values and returns the quotient.
 *
 * @param a The dividend circuit value.
 * @param b The divisor circuit value.
 * @returns The quotient.
 *
*/
declare const div: (a: CircuitValue, b: CircuitValue, c?: string, d?: string) => CircuitValue;
/**
 * Divides two circuit values and returns the remainder.
 *
 * @param a The dividend circuit value.
 * @param b The divisor circuit value.
 * @returns The remainder.
 *
*/
declare const mod: (a: CircuitValue, b: CircuitValue, c?: string, d?: string) => CircuitValue;
/**
 * Raises a circuit value to the power of another circuit value.
 *
 * @param a The base circuit value.
 * @param b The exponent circuit value.
 * @returns The result of the exponentiation.
 */
declare const pow: (a: CircuitValue, b: CircuitValue, c?: string) => CircuitValue;
/**
 * Computes the Poseidon hash of multiple circuit values.
 *
 * @param args The circuit values to hash.
 * @returns The hash value.
 */
declare const poseidon: (...args: CircuitValue[]) => CircuitValue;
/**
 * Retrieves the value of a circuit value.
 *
 * @param a The circuit value.
 * @returns The value of the circuit value.
 */
declare const value: (a: CircuitValue) => any;
/**
 * Logs the provided *circuit* values to the console. Use `console.log` for normal logging.
 *
 * @param args The `CircuitValue`s to log.
 */
declare const log: (...args: any) => void;
declare const console: {
    /**
     * Logs any *non CircuitValue* to the console. Use `log` for logging `CircuitValue`s.
     * @param args The values to log.
     */
    log: (...args: any) => void;
}